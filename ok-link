#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#define START         0.0              /* initial time                   */
#define STOP      8.0              /* terminal (close the door) time */
#define INFINITY   (100.0 * STOP)      /* must be much larger than STOP  */

/*单向链表*/
struct Student/*建立学生信息结构体模型*/
{
    int cName;/*学生姓名*/
    int iNumber;/*学生学号*/
    struct student *next;/*指向本结构体类型的指针类型*/
};

int iCount;/*全局变量表示链表长度*/
//struct Student *Insert(struct Student *pHead,int number);

struct Student *Create();/*创建链表函数声明*/
void print(struct Student *);/*遍历输出链表函数声明*/
void insert_data(struct Student **pHead,int i, int e,int t);
void Delete(struct Student *pHead,int number);
int main()
{
    int insert_n=2;/*定义并初始化要插入的结点号*/
    int delete_n=2;/*定义并初始化要删除的结点号*/
    struct Student *pHead;/*声明一个指向学生信息结构体的指针作pHead为头结点传递*/
    pHead=Create();/*创建链表，返回链表的头指针给pHead*/
    print(pHead);/*将指针pHead传入输出函数遍历输出*/
    insert_data(&pHead,2,33,999);
    print(pHead);
    Delete(pHead,2);
    int *c=NULL;
    c=find_min(pHead);

     printf("min data order is: %d.",c[1]);
     printf("min data is: %2d\n",c[0]);
     printf("min data time is: %2d\n",c[2]);
    print(pHead);/*将指针pHead传入输出函数遍历输出*/
    return 0;
}

int find_min(struct Student *pHead)
  {
   //   struct Student *pTemp;/*定义指向一个学生信息结构体类型的临时指针*/
      int iIndex=1;/*定义并出事哈变量iIndex，用来标识第几个学生（信息）*/
      int temp,temp2;
      int j=1;
      int min=10000;
      int time=0;
      int *a = (int *) malloc(sizeof(int)*2);
      a[0]=1;
      a[1]=1;
      a[2]=1;
    //  pTemp=pHead;/*指针得到首结点的地址*/
      while(pHead!=NULL)/*当临时指针不指向NULL时*/
      {

      //    printf("name：%s",pTemp->cName); /*输出姓名*/

          temp=pHead->cName;/*移动临时指针到下一个结点*/
          temp2=pHead->iNumber;
  		  if (min>temp){
  			  min= temp;
  			  j=iIndex;
  			  time=temp2;
  		  }
  		  pHead=pHead->next;
  		  iIndex++;/*进行自加运算*/

      }
      a[0]=min;
      a[1]=j;
     a[2]=time;
      return a;
  }
struct Student *Insert(struct Student *pHead,int number)
{
    struct Student *p=pHead,*pNew;/*定义pNew指向新分配的空间*/
    while(p&&p->iNumber!=number)
        p=p->next;/*使临时结点跟踪到要插入的位置（该实例必须存在学号为number的信息，插入其后，否则出错）*/
    printf("Name and ID number:\n");
    /*分配内存空间，返回该内存空间的地址*/
    pNew=(struct Student *)malloc(sizeof(struct Student));
    scanf("%d",&pNew->cName);
    scanf("%d",&pNew->iNumber);
    pNew->next=p->next;/*新结点指针指向原来的结点*/
    p->next=pNew;/*头指针指向新结点*/
    iCount++;/*增加链表结点数量*/
    return pHead;/*返回头指针*/
}



void insert_data(struct Student **pHead,int i, int e,int t){
	struct Student *temp;
	struct Student *target;
	struct Student *p;
 int item;
 int j=1;
 int tt;
 printf("insert_data:\n");
 item=e;
 tt=t;
 target=*pHead;
 for(;j<i-1;target=target->next,++j);  //不断移动target位置，到要插入结点位置，
 temp=(struct Student *)malloc(sizeof(struct Student));   //申请内存空间
 temp->cName=item;       //存入要存入的数据位置
 temp->iNumber=tt;
 p=target->next;
 target->next=temp;
 temp->next=p;
 iCount++;
}

void Delete(struct Student *pHead,int number)//iput 4th will del 5th
{
    int i;
    struct Student *pTemp;/*临时指针*/
    struct Student *pPre;/*表示要删除结点前的结点*/
    pTemp=pHead;/*得到链表的头结点*/
    pPre=pTemp;
    for(i=0;i<number;i++)
    {/*通过for循环使得Temp指向要删除的结点*/
        pPre=pTemp;
        pTemp=pTemp->next;
    }
    pPre->next=pTemp->next;/*连接删除结点两边的结点*/
    free(pTemp);/*释放要删除结点的内存空间*/
    iCount--;/*减少链表中的结点个数*/
}

struct Student *Create()
{
    struct Student *pHead=NULL;/*初始化链表，头指针为空*/
    struct Student *pEnd,*pNew;
    iCount=0;/*初始化链表长度*/
    pEnd=pNew=(struct Student *)malloc(sizeof(struct Student));/*动态开辟一个学生信息结构体类型大小的空间，使得pEnd和pNew同时指向该结构体空间*/

    pNew->cName	 =INFINITY;
    pNew->iNumber=INFINITY;

  //  scanf("%d",&pNew->cName);/*从输入流获取第一个学生姓名*/
  //  scanf("%d",&pNew->iNumber);/*从输入流获取第一个学生学号*/
    while(pNew->iNumber!=0)/*设定循环结束条件——学号不为0时*/
    {
        iCount++;/*链表长度+1，即学生信息个数+1*/
        if(iCount==1)/*如果链表长度刚刚加为1，执行*/
        {
            pNew->next=pHead;/*使指针指向为空*/
            pEnd=pNew;/*跟踪新加入的结点*/
            pHead=pNew;/*头结点指向首结点*/
        }
        else/*如果链表已经建立，长度大于等于2时，执行*/
        {
            pNew->next=NULL;/*新结点的指针为空*/
            pEnd->next=pNew;/*原来的结点指向新结点*/
            pEnd=pNew;/*pEnd指向新结点*/
        }
        pNew=(struct Student *)malloc(sizeof(struct Student));/*再次分配结点的内存空间*/
        scanf("%d",&pNew->cName);/*从输入流获取第一个学生姓名*/
        scanf("%d",&pNew->iNumber);/*从输入流获取第一个学生学号*/
    }
    free(pNew);/*释放结点空间*/
    return pHead;/*返回创建出的头指针*/
}

void print(struct Student *pHead)
{
    struct Student *pTemp;/*定义指向一个学生信息结构体类型的临时指针*/
    int iIndex=1;/*定义并出事哈变量iIndex，用来标识第几个学生（信息）*/
    printf("All have %d students:\n",iCount);
    pTemp=pHead;/*指针得到首结点的地址*/
    while(pTemp!=NULL)/*当临时指针不指向NULL时*/
    {
        printf("No.%d inform:\n",iIndex);
        printf("Name:%d, ",pTemp->cName); /*输出姓名*/
        printf("ID:%d\n",pTemp->iNumber);/*输出学号*/
        pTemp=pTemp->next;/*移动临时指针到下一个结点*/
        iIndex++;/*进行自加运算*/
    }
}


